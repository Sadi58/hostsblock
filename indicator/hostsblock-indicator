#!/bin/bash

get_password()
{
sudo_password=$(gksudo --print-pass --description="HostsBlock" --message="Provide permission to make system changes: Type your password or press Cancel." -- : 2>/dev/null)
# check for null entry or cancellation
if [[ ${?} != 0 || -z ${sudo_password} ]]
then
	exit 4
fi
if ! sudo -kSp '' [ 1 ] <<<"${sudo_password}" 2>/dev/null
then
	exit 4
fi
}

auto_refresh()
{
# do some cleaning first
for i in `ps -e --sort=start -o start,pid,cmd | grep "inotifywait -qqre modify /usr/share/indicator-hostsblock/" | egrep -v grep | sed 1d | awk '{print$2}'`
do
	kill -9 $i
done
for i in `ps -e --sort=start -o start,pid,cmd | grep "/usr/share/indicator-hostsblock/hostsblock-indicator auto_refresh" | egrep -v grep | sed 1d | awk '{print$2}'`
do
kill -9 $i
done
for i in `ps -e --sort=start -o start,pid,cmd | grep "/usr/share/indicator-hostsblock/hostsblock-indicator restart_indicator" | egrep -v grep | sed 1d | awk '{print$2}'`
do
kill -9 $i
done
# start monitoring
while inotifywait -qqre modify "/usr/share/indicator-hostsblock/"
	do
	"/usr/share/indicator-hostsblock/hostsblock-indicator" restart_indicator
done
}

status_hostsblock()
{
# check if hosts.block exists
if [ -f "/etc/hosts.block" ]
then
	echo "Hostsblock: Enabled"
else
	echo "Hostsblock: Disabled"
fi
}

status_last_update()
{
log_file="/usr/share/indicator-hostsblock/hostsblock.log"
# check if log does not exist
if [[ ! -f "$log_file" ]]
then
	if [[ -L "$log_file" ]]
	then
		echo "Last: None"
	else
		echo "Last: None"
	fi
# if exists
else
	echo "Last: `grep "Hostsblock completed on " "/usr/share/indicator-hostsblock/hostsblock.log" | awk -F " completed on " '{print $2}'`"
fi
}

status_auto_update()
{
check_hourly=$(ls "/etc/cron.hourly" | grep "hostsblock-launcher")
check_daily=$(ls "/etc/cron.daily" | grep "hostsblock-launcher")
check_weekly=$(ls "/etc/cron.weekly" | grep "hostsblock-launcher")
check_monthly=$(ls "/etc/cron.monthly" | grep "hostsblock-launcher")
if [ "$check_hourly" = "hostsblock-launcher" ]
then
	echo "Auto-Update: Hourly" > "/tmp/hostsblock-auto-update.txt"
else
	if [ "$check_daily" = "hostsblock-launcher" ]
	then
		echo "Auto-Update: Daily" > "/tmp/hostsblock-auto-update.txt"
	else
		if [ "$check_weekly" = "hostsblock-launcher" ]
		then
			echo "Auto-Update: Weekly" > "/tmp/hostsblock-auto-update.txt"
		else
			if [ "$check_monthly" = "hostsblock-launcher" ]
			then
				echo "Auto-Update: Monthly" > "/tmp/hostsblock-auto-update.txt"
			else
				echo "Auto-Update: None" > "/tmp/hostsblock-auto-update.txt"
			fi
		fi
	fi
fi
cat "/tmp/hostsblock-auto-update.txt"
}

launcher_gui()
{
# notify
notify-send "HostsBlock" "checking if there are any updates..." -i gtk-dialog-info &
# check updates
"/usr/share/indicator-hostsblock/hostsblock-check-updates" -v 3 &>"/tmp/hostsblock-check-updates.log"
# append date and time stamp to log
echo "Hostsblock checked updates on `date +'%a %d %b'` `date +'%H:%M'`" >> "/tmp/hostsblock-check-updates.log"
# changes
grep "\[WARN\] FAILED to refresh\/download blocklist " "/tmp/hostsblock-check-updates.log" | sed -e "s/^\[WARN\] FAILED to refresh\/download blocklist //g" -e "s/\?hostformat=hosts&mimetype=plaintext//g" -e "s/\.$//g" -e "s/^http/• http/g" > "/tmp/hostsblock-updates.txt"
changes=$(grep "http" "/tmp/hostsblock-updates.txt")
# no changes
if [ -z "$changes" ]
then
	notify-send "HostsBlock" "found no updates; exiting..." -i gtk-dialog-info &
	exit
else
	zenity --question --title="HostsBlock" --text="Found the following change(s):\n\n<i>$changes</i>\n\n<b>Would you like to update now?</b>" --width=300 --height=400
	if [ $? = 0 ]
	then
# notify
		notify-send "HostsBlock" "applying updates..." -i gtk-dialog-info &
# proceed to update and make log file open for all
		get_password
		sudo -Sp '' "/usr/share/indicator-hostsblock/hostsblock.sh" -v 3 &>"/tmp/hostsblock.log" <<<"${sudo_password}"
		sudo -Sp '' chmod a+w "/tmp/hostsblock.log" <<<"${sudo_password}"
# append date and time stamp to log
		echo "Hostsblock completed on `date +'%a %d %b'` `date +'%H:%M'`" >> "/tmp/hostsblock.log"
# backup log
		sudo -Sp '' cp -f "/tmp/hostsblock.log" "/usr/share/indicator-hostsblock/hostsblock.log" <<<"${sudo_password}"
# create history log
		grep "Hostsblock completed on " "/usr/share/indicator-hostsblock/hostsblock.log" > "/tmp/hostsblock-history-new.log"
		grep " urls redirected to " "/usr/share/indicator-hostsblock/hostsblock.log" >> "/tmp/hostsblock-history-new.log"
		sed -i 's/Hostsblock completed on [A-Z][a-z][a-z] //g' "/tmp/hostsblock-history-new.log"
		sed -i 's/\[INFO\] \/etc\/hosts\.block: //g' "/tmp/hostsblock-history-new.log"
		sed -i 's/ redirected to 0\.0\.0\.0\./ redirected/g' "/tmp/hostsblock-history-new.log"
		cat "/tmp/hostsblock-history-new.log" | tr '\n' '\t' | sed 's/\t$/\n/g' > "/tmp/hostsblock-history-new.txt"
		mv "/tmp/hostsblock-history-new.txt" "/tmp/hostsblock-history-new.log"
		chmod a+w "/tmp/hostsblock-history-new.log"
		if [[ ! -f "/usr/share/indicator-hostsblock/hostsblock-history.log" ]]
		then
			sudo -Sp '' mv "/tmp/hostsblock-history-new.log" "/usr/share/indicator-hostsblock/hostsblock-history.log" <<<"${sudo_password}"
		else
			cat "/usr/share/indicator-hostsblock/hostsblock-history.log" >> "/tmp/hostsblock-history-new.log"
			lines=$(wc -l "/tmp/hostsblock-history-new.log" | awk '{print $1}')
			if [ $lines -gt 30 ]
			then
				sed -i '$d' "/tmp/hostsblock-history-new.log"
			fi
			sudo -Sp '' mv "/tmp/hostsblock-history-new.log" "/usr/share/indicator-hostsblock/hostsblock-history.log" <<<"${sudo_password}"
		fi
# option to view log
		new_update=$(grep "Hostsblock completed on " "/tmp/hostsblock.log" | awk -F " completed on " '{print $2}')
		zenity --question --title="HostsBlock" --text="Last updated: <b><i>$new_update</i></b>\n\nWould you like to view the log file now?"
		if [ $? = 0 ]
		then
# display log
			zenity --text-info --title="hostsblock.log (view only)" --filename="/usr/share/indicator-hostsblock/hostsblock.log" --width=680 --height=580
		fi
	fi
fi
}

scheduler_gui()
{
auto_update=$(cat "/tmp/hostsblock-auto-update.txt" | sed -e "s/Auto\-Update\: //g")
# options
menu_scheduler()
{
im="zenity --list --radiolist --title=\"HostsBlock Scheduler\" --text=\"Current HostsBlock auto-update setting: <b><i>$auto_update</i></b>\nSelect one of the options below to change this:\" --width=400 --height=250"
im=$im" --column=\"☑\" --column \"Options\" --column \"Description\" "
im=$im"FALSE \"Hourly\" \"HostsBlock will auto-update every hour\" "
im=$im"FALSE \"Daily\" \"HostsBlock will auto-update every day\" "
im=$im"FALSE \"Weekly\" \"HostsBlock will auto-update every week\" "
im=$im"FALSE \"Monthly\" \"HostsBlock will auto-update every month\" "
im=$im"FALSE \"None\" \"HostsBlock will NOT auto-update\" "
}
option_scheduler()
{
choice=`echo $im | sh -`
if echo $choice | grep -iE "Hourly|Daily|Weekly|Monthly|None" > /dev/null
then
	get_password
	if echo $choice | grep "Hourly" > /dev/null
	then
		notify-send "HostsBlock" "updates will be checked automatically every hour" -i gtk-dialog-info &
		sudo -Sp '' rm "/etc/cron.hourly/hostsblock-launcher" "/etc/cron.daily/hostsblock-launcher" "/etc/cron.weekly/hostsblock-launcher" "/etc/cron.monthly/hostsblock-launcher" <<<"${sudo_password}"
		sudo -Sp '' ln -sf "/usr/share/indicator-hostsblock/hostsblock-launcher" "/etc/cron.hourly/hostsblock-launcher" <<<"${sudo_password}"
		restart_indicator
	fi
	if echo $choice | grep "Daily" > /dev/null
	then
		notify-send "HostsBlock" "updates will be checked automatically every day" -i gtk-dialog-info &
		sudo -Sp '' rm "/etc/cron.hourly/hostsblock-launcher" "/etc/cron.daily/hostsblock-launcher" "/etc/cron.weekly/hostsblock-launcher" "/etc/cron.monthly/hostsblock-launcher" <<<"${sudo_password}"
		sudo -Sp '' ln -sf "/usr/share/indicator-hostsblock/hostsblock-launcher" "/etc/cron.daily/hostsblock-launcher" <<<"${sudo_password}"
		restart_indicator
	fi
	if echo $choice | grep "Weekly" > /dev/null
	then
		notify-send "HostsBlock" "updates will be checked automatically every week" -i gtk-dialog-info &
		sudo -Sp '' rm "/etc/cron.hourly/hostsblock-launcher" "/etc/cron.daily/hostsblock-launcher" "/etc/cron.weekly/hostsblock-launcher" "/etc/cron.monthly/hostsblock-launcher" <<<"${sudo_password}"
		sudo -Sp '' ln -sf "/usr/share/indicator-hostsblock/hostsblock-launcher" "/etc/cron.weekly/hostsblock-launcher" <<<"${sudo_password}"
		restart_indicator
	fi
	if echo $choice | grep "Monthly" > /dev/null
	then
		notify-send "HostsBlock" "updates will be checked automatically every month" -i gtk-dialog-info &
		sudo -Sp '' rm "/etc/cron.hourly/hostsblock-launcher" "/etc/cron.daily/hostsblock-launcher" "/etc/cron.weekly/hostsblock-launcher" "/etc/cron.monthly/hostsblock-launcher" <<<"${sudo_password}"
		sudo -Sp '' ln -sf "/usr/share/indicator-hostsblock/hostsblock-launcher" "/etc/cron.monthly/hostsblock-launcher" <<<"${sudo_password}"
		restart_indicator
	fi
	if echo $choice | grep "None" > /dev/null
	then
		notify-send "HostsBlock" "updates will not be checked automatically" -i gtk-dialog-info &
		sudo -Sp '' rm "/etc/cron.hourly/hostsblock-launcher" "/etc/cron.daily/hostsblock-launcher" "/etc/cron.weekly/hostsblock-launcher" "/etc/cron.monthly/hostsblock-launcher" <<<"${sudo_password}"
		restart_indicator
	fi
fi
}
menu_scheduler
option_scheduler
}

editor_gui()
{
# options
menu_editor()
{
im="zenity --list --checklist --title=\"HostsBlock Editor\" --text=\"<b>Select file(s) to edit:</b>\" --width=560 --height=250"
im=$im" --column=\"☑\" --column \"Filename\" --column \"Location\" "
im=$im"FALSE \"hosts.block\" \"/etc/hosts.block\" "
im=$im"FALSE \"hostsblock.conf\" \"/usr/share/indicator-hostsblock/hostsblock.conf\" "
im=$im"FALSE \"hostsblock.allow.list\" \"/usr/share/indicator-hostsblock/hostsblock.allow.list\" "
im=$im"FALSE \"hostsblock.deny.list\" \"/usr/share/indicator-hostsblock/hostsblock.deny.list\" "
im=$im"FALSE \"user.allow.list\" \"~/.local/share/indicator-hostsblock/user.allow.list\" "
im=$im"FALSE \"user.deny.list\" \"~/.local/share/indicator-hostsblock/user.deny.list\" "
}
option_editor()
{
choice=`echo $im | sh -`
if echo $choice | grep "hosts" > /dev/null
then
	get_password
	if echo $choice | grep "hosts.block" > /dev/null
	then
		sudo -Sp '' gedit "/etc/hosts.block" <<<"${sudo_password}" &
	fi
	if echo $choice | grep "hostsblock.conf" > /dev/null
	then
		sudo -Sp '' gedit "/usr/share/indicator-hostsblock/hostsblock.conf" <<<"${sudo_password}" &
	fi
	if echo $choice | grep "hostsblock.allow.list" > /dev/null
	then
		sudo -Sp '' gedit "/usr/share/indicator-hostsblock/hostsblock.allow.list" <<<"${sudo_password}" &
	fi
	if echo $choice | grep "hostsblock.deny.list" > /dev/null
	then
		sudo -Sp '' gedit "/usr/share/indicator-hostsblock/hostsblock.deny.list" <<<"${sudo_password}" &
	fi
fi
if echo $choice | grep "user.allow.list" > /dev/null
then
	if [ -f "$HOME/.local/share/indicator-hostsblock/user.allow.list" ]
	then
		gedit "$HOME/.local/share/indicator-hostsblock/user.allow.list" &
	else
		zenity --question --title="user.allow.list doesn't exist" --text="Would you like to create \"$HOME/.local/share/indicator-hostsblock/user.allow.list\" now?"
		if [ $? = 0 ]
		then
			if [ ! -d "$HOME/.local/share/indicator-hostsblock/" ]
			then
				mkdir "$HOME/.local/share/indicator-hostsblock/"
			else
				touch "$HOME/.local/share/indicator-hostsblock/user.allow.list"
				gedit "$HOME/.local/share/indicator-hostsblock/user.allow.list" &
			fi
		fi
	fi
fi
if echo $choice | grep "user.deny.list" > /dev/null
then
	if [ -f "$HOME/.local/share/indicator-hostsblock/user.deny.list" ]
	then
		gedit "$HOME/.local/share/indicator-hostsblock/user.deny.list" &
	else
		zenity --question --title="user.deny.list doesn't exist" --text="Would you like to create \"$HOME/.local/share/indicator-hostsblock/user.deny.list\" now?"
		if [ $? = 0 ]
		then
			if [ ! -d "$HOME/.local/share/indicator-hostsblock/" ]
			then
				mkdir "$HOME/.local/share/indicator-hostsblock/"
			else
				touch "$HOME/.local/share/indicator-hostsblock/user.deny.list"
				gedit "$HOME/.local/share/indicator-hostsblock/user.deny.list" &
			fi
		fi
	fi
fi
}
menu_editor
option_editor
}

merge_allow_gui()
{
# merge files if user list exists and is not empty
if [ -f "$HOME/.local/share/indicator-hostsblock/user.allow.list" ]
then
	if [ -s "$HOME/.local/share/indicator-hostsblock/user.allow.list" ]
	then
		zenity --question --title="Merge Allow Lists" --text="<b>This will merge:</b>\n\"<i>$HOME/.local/share/indicator-hostsblock/user.allow.list</i>\"\n<b>into:</b> \"<i>/usr/share/indicator-hostsblock/hostsblock.allow.list</i>\"\nAnd then both files will be displayed.\n\nHowever, please note that these changes will take effect only when the <b>hosts.block</b> file is updated next -- unless it's edited manually and <b>dnsmasq</b> is restarted.\n\n<b>Would you like to proceed?</b>" --width=400
		if [ $? = 0 ]
		then
			get_password
			sudo -Sp '' cp -f "/usr/share/indicator-hostsblock/hostsblock.allow.list" "/usr/share/indicator-hostsblock/hostsblock.allow.list.old" <<<"${sudo_password}"
			sudo -Sp '' cat "$HOME/.local/share/indicator-hostsblock/user.allow.list" "/usr/share/indicator-hostsblock/hostsblock.allow.list" > "/tmp/hostsblock.allow.list" <<<"${sudo_password}"
			sudo -Sp '' mv "/tmp/hostsblock.allow.list" "/usr/share/indicator-hostsblock/hostsblock.allow.list" <<<"${sudo_password}"
			sudo -Sp '' sort -u -o "/usr/share/indicator-hostsblock/hostsblock.allow.list" "/usr/share/indicator-hostsblock/hostsblock.allow.list" <<<"${sudo_password}"
			zenity --text-info --filename="/usr/share/indicator-hostsblock/hostsblock.allow.list" --title="hostsblock.allow.list - merged (view only)" --width=450 --height=600 &
			zenity --text-info --filename="$HOME/.local/share/indicator-hostsblock/user.allow.list" --title="user.allow.list (view only)" --width=300 --height=600 &
		fi
	else
		zenity --info --title="Merge Allow Lists" --text="<b>The file</b>\n\"<i>$HOME/.local/share/indicator-hostsblock/user.allow.list</i>\"\n<b>is empty.</b>\nNothing to do..."
	fi
else
	zenity --info --title="Merge Allow Lists" --text="<b>The file</b>\n\"<i>$HOME/.local/share/indicator-hostsblock/user.allow.list</i>\"\n<b>doesn\'t exist.</b>\nNothing to do..."
fi

}

merge_deny_gui()
{
# merge files if user list exists and is not empty
if [ -f "$HOME/.local/share/indicator-hostsblock/user.deny.list" ]
then
	if [ -s "$HOME/.local/share/indicator-hostsblock/user.deny.list" ]
	then
		zenity --question --title="Merge Deny Lists" --text="<b>This will merge:</b>\n\"<i>$HOME/.local/share/indicator-hostsblock/user.deny.list</i>\"\n<b>into:</b> \"<i>/usr/share/indicator-hostsblock/hostsblock.deny.list</i>\"\nAnd then both files will be displayed.\n\nHowever, please note that these changes will take effect only when the <b>hosts.block</b> file is updated next -- unless it's edited manually and <b>dnsmasq</b> is restarted.\n\n<b>Would you like to proceed?</b>" --width=400
		if [ $? = 0 ]
		then
			get_password
			sudo -Sp '' cp -f "/usr/share/indicator-hostsblock/hostsblock.deny.list" "/usr/share/indicator-hostsblock/hostsblock.deny.list.old" <<<"${sudo_password}"
			sudo -Sp '' cat "$HOME/.local/share/indicator-hostsblock/user.deny.list" "/usr/share/indicator-hostsblock/hostsblock.deny.list" > "/tmp/hostsblock.deny.list" <<<"${sudo_password}"
			sudo -Sp '' mv "/tmp/hostsblock.deny.list" "/usr/share/indicator-hostsblock/hostsblock.deny.list" <<<"${sudo_password}"
			sudo -Sp '' sort -u -o "/usr/share/indicator-hostsblock/hostsblock.deny.list" "/usr/share/indicator-hostsblock/hostsblock.deny.list" <<<"${sudo_password}"
			zenity --text-info --filename="/usr/share/indicator-hostsblock/hostsblock.deny.list" --title="hostsblock.deny.list - merged (view only)" --width=450 --height=600 &
			zenity --text-info --filename="$HOME/.local/share/indicator-hostsblock/user.deny.list" --title="user.deny.list (view only)" --width=300 --height=600 &
		fi
	else
		zenity --info --title="Merge Deny Lists" --text="<b>The file</b>\n\"<i>$HOME/.local/share/indicator-hostsblock/user.deny.list</i>\"\n<b>is empty.</b>\nNothing to do..."
	fi
else
	zenity --info --title="Merge Deny Lists" --text="<b>The file</b>\n\"<i>$HOME/.local/share/indicator-hostsblock/user.deny.list</i>\"\n<b>doesn\'t exist.</b>\nNothing to do..."
fi
}

viewer_gui()
{
# options
menu_viewer()
{
im="zenity --list --checklist --title=\"HostsBlock Viewer\" --text=\"<b>Select file(s) to view:</b>\" --width=560 --height=250"
im=$im" --column=\"☑\" --column \"Filename\" --column \"Location\" "
im=$im"FALSE \"hostsblock.conf(full)\" \"/usr/share/indicator-hostsblock/hostsblock.conf\" "
im=$im"FALSE \"hostsblock.conf(extract)\" \"/usr/share/indicator-hostsblock/hostsblock.conf\" "
im=$im"FALSE \"hostsblock.deny.list\" \"/usr/share/indicator-hostsblock/hostsblock.deny.list\" "
im=$im"FALSE \"hostsblock.allow.list\" \"/usr/share/indicator-hostsblock/hostsblock.allow.list\" "
im=$im"FALSE \"user.deny.list\" \"~/.local/share/indicator-hostsblock/user.deny.list\" "
im=$im"FALSE \"user.allow.list\" \"~/.local/share/indicator-hostsblock/user.allow.list\" "
}
option_viewer()
{
choice=`echo $im | sh -`
if echo $choice | grep "hostsblock.conf(full)" > /dev/null
then
	zenity --text-info --filename="/usr/share/indicator-hostsblock/hostsblock.conf" --title="hostsblock.conf - full (view only)" --width=980 --height=680 &
fi
if echo $choice | grep "hostsblock.conf(extract)" > /dev/null
then
	cp "/usr/share/indicator-hostsblock/hostsblock.conf" "/tmp/extract-hostsblock.conf"
	sed -i "s/^# .*$//g" "/tmp/extract-hostsblock.conf"
	sed -i "s/^### .*$//g" "/tmp/extract-hostsblock.conf"
	sed -i "/^\s*$/d" "/tmp/extract-hostsblock.conf"
	sed -i "s/^##/\n##/g" "/tmp/extract-hostsblock.conf"
	zenity --text-info --filename="/tmp/extract-hostsblock.conf" --title="hostsblock.conf - extract (view only)" --width=980 --height=680 &
fi
if echo $choice | grep "hostsblock.deny.list" > /dev/null
then
	zenity --text-info --filename="/usr/share/indicator-hostsblock/hostsblock.deny.list" --title="hostsblock.deny.list (view only)" --width=300 --height=600 &
fi
if echo $choice | grep "hostsblock.allow.list" > /dev/null
then
	zenity --text-info --filename="/usr/share/indicator-hostsblock/hostsblock.allow.list" --title="hostsblock.allow.list (view only)" --width=300 --height=600 &
fi
if echo $choice | grep "user.deny.list" > /dev/null
then
	if [ -f "$HOME/.local/share/indicator-hostsblock/user.deny.list" ]
	then
		zenity --text-info --filename="$HOME/.local/share/indicator-hostsblock/user.deny.list" --title="user.deny.list (view only)" --width=300 --height=600 &
	else
		notify-send "HostsBlock" "user.deny.list file does not exist" -i gtk-dialog-info &
	fi
fi
if echo $choice | grep "user.allow.list" > /dev/null
then
	if [ -f "$HOME/.local/share/indicator-hostsblock/user.allow.list" ]
	then
		zenity --text-info --filename="$HOME/.local/share/indicator-hostsblock/user.allow.list" --title="user.allow.list (view only)" --width=300 --height=600 &
	else
		notify-send "HostsBlock" "user.allow.list file does not exist" -i gtk-dialog-info &
	fi
fi
}
menu_viewer
option_viewer
}

view_hostsblock_gui()
{
# check if exists
if [ -f "/etc/hosts.block" ]
then
	zenity --text-info --filename="/etc/hosts.block" --title="hosts.block (view only)" --width=600 --height=800
else
	notify-send "HostsBlock" "hosts.block file does not exist" -i gtk-dialog-info &
fi
}

view_log_gui()
{
# check if exists
if [ -f "/usr/share/indicator-hostsblock/hostsblock.log" ]
then
	zenity --text-info --filename="/usr/share/indicator-hostsblock/hostsblock.log" --title="hostsblock.log (view only)" --width=680 --height=580
else
	notify-send "HostsBlock" "hostsblock.log file does not exist" -i gtk-dialog-info &
fi
}

view_history_log_gui()
{
# check if exists
if [ -f "/usr/share/indicator-hostsblock/hostsblock-history.log" ]
then
	HISTORY=$(cat "/usr/share/indicator-hostsblock/hostsblock-history.log")
	zenity --info --text="$HISTORY" --title="hostsblock-history.log" --width=250 --height=500 &
else
	notify-send "HostsBlock" "history.log file does not exist" -i gtk-dialog-info &
fi
}

query_hostsblock_gui()
{
DOMAIN=$(zenity --entry --title="Query /etc/hosts.block" --text="For:" --width=250)
if [ -z "$DOMAIN" ]
then
	notify-send "HostsBlock" "nothing entered; exiting..." -i gtk-dialog-info -t 500 -u normal &
	exit
else
	RESULT=$(grep "$DOMAIN" "/etc/hosts.block" | sed -e "s/^0\.0\.0\.0\s\s*//g" -e "s/^127\.0\.0\.1\s\s*//g")
	if [ -z "$RESULT" ]
	then
		zenity --info --title="Query results" --text="No match found!" &
	else
		echo "$RESULT" > "/tmp/hosts.block-query-result.txt"
		zenity --text-info --filename="/tmp/hosts.block-query-result.txt" --title="Query results" &
	fi
fi
}

query_cache_gui()
{
if [ ! -d "/tmp/hostsblock-lists" ]
then
	mkdir "/tmp/hostsblock-lists"
fi
cd "/tmp/hostsblock-lists"

if [ ! -f "/tmp/hostsblock-lists/hosts-file.net.ad_servers.txt" ]
then
	cp "/var/cache/hostsblock/hosts-file.net.ad_servers.txt" "/tmp/hostsblock-lists/"
fi
if [ ! -f "/tmp/hostsblock-lists/pgl.yoyo.org.as.serverlist.php.hostformat.hosts.mimetype.plaintext" ]
then
	cp "/var/cache/hostsblock/pgl.yoyo.org.as.serverlist.php.hostformat.hosts.mimetype.plaintext" "/tmp/hostsblock-lists/"
fi
if [ ! -f "/tmp/hostsblock-lists/https:..raw.githubusercontent.com.Sadi58.hostsblock.master.indicator.hosts.txt" ]
then
	cp "/var/cache/hostsblock/https:..raw.githubusercontent.com.Sadi58.hostsblock.master.indicator.hosts.txt" "/tmp/hostsblock-lists/"
fi
if [ ! -f "/tmp/hostsblock-lists/someonewhocares.org.hosts.zero." ]
then
	cp "/var/cache/hostsblock/someonewhocares.org.hosts.zero." "/tmp/hostsblock-lists/"
fi
if [ ! -f "/tmp/hostsblock-lists/sysctl.org.cameleon.hosts" ]
then
	cp "/var/cache/hostsblock/sysctl.org.cameleon.hosts" "/tmp/hostsblock-lists/"
fi
if [ ! -f "/tmp/hostsblock-lists/Hosts" ]
then
	unzip -qq "/var/cache/hostsblock/hostsfile.mine.nu.Hosts0.zip" Hosts
fi
if [ ! -f "/tmp/hostsblock-lists/BadHosts.unx/hosts.lnx" ]
then
	unzip -qq "/var/cache/hostsblock/hostsfile.org.Downloads.BadHosts.unx.zip" BadHosts.unx/hosts.lnx
fi
if [ ! -f "/tmp/hostsblock-lists/HOSTS" ]
then
	unzip -qq "/var/cache/hostsblock/winhelp2002.mvps.org.hosts.zip" HOSTS
fi
if [ ! -f "/tmp/hostsblock-lists/adaway.org.hosts.txt" ]
then
	cp "/var/cache/hostsblock/adaway.org.hosts.txt" "/tmp/hostsblock-lists/"
fi
DOMAIN=$(zenity --entry --title="Query cached blocklists" --text="For:" --width=250)
if [ -z "$DOMAIN" ]
then
	notify-send "HostsBlock" "nothing entered; exiting..." -i gtk-dialog-info -t 500 -u normal &
	exit
else
	RESULT01=$(grep "$DOMAIN" "/tmp/hostsblock-lists/hosts-file.net.ad_servers.txt" | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	RESULT02=$(grep "$DOMAIN" "/tmp/hostsblock-lists/pgl.yoyo.org.as.serverlist.php.hostformat.hosts.mimetype.plaintext" | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	RESULT03=$(grep "$DOMAIN" "/tmp/hostsblock-lists/https:..raw.githubusercontent.com.Sadi58.hostsblock.master.indicator.hosts.txt" | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	RESULT04=$(grep "$DOMAIN" "/tmp/hostsblock-lists/someonewhocares.org.hosts.zero." | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	RESULT05=$(grep "$DOMAIN" "/tmp/hostsblock-lists/sysctl.org.cameleon.hosts" | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	RESULT06=$(grep "$DOMAIN" "/tmp/hostsblock-lists/Hosts" | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	RESULT07=$(grep "$DOMAIN" "/tmp/hostsblock-lists/BadHosts.unx/hosts.lnx" | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	RESULT08=$(grep "$DOMAIN" "/tmp/hostsblock-lists/HOSTS" | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	RESULT09=$(grep "$DOMAIN" "/tmp/hostsblock-lists/adaway.org.hosts.txt" | sed -e "s/^#..*$//g" -e "s/^0\.0\.0\.0//g" -e "s/^127\.0\.0\.1//g" -e "s/\t//g" | tr '\n' ' ' | tr '\r' ' ')
	echo "• hosts-file.net.ad_servers: $RESULT01" > "/tmp/hostsblock-cache-query-result.txt"
	echo "• pgl.yoyo.org.as.serverlist: $RESULT02" >> "/tmp/hostsblock-cache-query-result.txt"
	echo "• Sadi58.hostsblock: $RESULT03" >> "/tmp/hostsblock-cache-query-result.txt"
	echo "• someonewhocares.org.hosts: $RESULT04" >> "/tmp/hostsblock-cache-query-result.txt"
	echo "• sysctl.org.cameleon.hosts: $RESULT05" >> "/tmp/hostsblock-cache-query-result.txt"
	echo "• hostsfile.mine.nu.Hosts: $RESULT06" >> "/tmp/hostsblock-cache-query-result.txt"
	echo "• hostsfile.org.hosts.lnx: $RESULT07" >> "/tmp/hostsblock-cache-query-result.txt"
	echo "• winhelp2002.mvps.org.HOSTS: $RESULT08" >> "/tmp/hostsblock-cache-query-result.txt"
	echo "• adaway.org.hosts: $RESULT09" >> "/tmp/hostsblock-cache-query-result.txt"
	zenity --text-info --filename="/tmp/hostsblock-cache-query-result.txt" --title="Search results" &
fi
}

change_icon_gui()
{
# options
menu_icon()
{
im="zenity --list --radiolist --title=\"Change Icon\" --text=\"<b>Select icon to use:</b>\" --width=270 --height=170"
im=$im" --column=\"☑\" --column \"Options\" --column \"Description\" "
im=$im"FALSE \"Light\" \"Icon for dark panels\" "
im=$im"FALSE \"Dark\" \"Icon for light panels\" "
im=$im"FALSE \"Color\" \"Icon for all panels\" "
}
option_icon()
{
choice=`echo $im | sh -`
if echo $choice | grep "Light" > /dev/null
then
	cp -f "/usr/share/indicator-hostsblock/hostsblock-dark.svg" "/usr/share/indicator-hostsblock/hostsblock.svg"
fi
if echo $choice | grep "Dark" > /dev/null
then
	cp -f "/usr/share/indicator-hostsblock/hostsblock-light.svg" "/usr/share/indicator-hostsblock/hostsblock.svg"
fi
if echo $choice | grep "Color" > /dev/null
then
	cp -f "/usr/share/indicator-hostsblock/hostsblock-color.svg" "/usr/share/indicator-hostsblock/hostsblock.svg"
fi
}
menu_icon
option_icon
}

disable_hostsblock()
{
# check if hosts.block exists
if [ -f "/etc/hosts.block" ]
then
	get_password
# commands
	sudo -Sp '' mv "/etc/hosts.block" "/etc/hosts.block.disabled" <<<"${sudo_password}"
	sudo -Sp '' "/etc/init.d/dnsmasq" restart <<<"${sudo_password}"
	"/usr/share/indicator-hostsblock/hostsblock-indicator" restart_indicator &
# notify
	"/usr/bin/canberra-gtk-play" --id="dialog-information" &
	notify-send "HostsBlock" "hostsblock disabled, dnsmasq restarted" -i gtk-dialog-info
else
	if [ -f "/etc/hosts.block.disabled" ]
	then
		"/usr/bin/canberra-gtk-play" --id="dialog-information" &
		notify-send "HostsBlock" "hostsblock is already disabled!" -i gtk-dialog-info
	else
		"/usr/bin/canberra-gtk-play" --id="dialog-information" &
		notify-send "HostsBlock" "hostsblock is not installed!" -i gtk-dialog-info
	fi
fi
}

enable_hostsblock()
{
# check if hosts.block doesn't exist
if [ ! -f "/etc/hosts.block" ]
then
	if [ -f "/etc/hosts.block.disabled" ]
	then
		get_password
# commands
		sudo -Sp '' mv "/etc/hosts.block.disabled" "/etc/hosts.block" <<<"${sudo_password}"
		sudo -Sp '' "/etc/init.d/dnsmasq" restart <<<"${sudo_password}"
		"/usr/share/indicator-hostsblock/hostsblock-indicator" restart_indicator &
# notify
		"/usr/bin/canberra-gtk-play" --id="dialog-information" &
		notify-send "HostsBlock" "hostsblock re-enabled, dnsmasq restarted" -i gtk-dialog-info
	else
		"/usr/bin/canberra-gtk-play" --id="dialog-information" &
		notify-send "HostsBlock" "hostsblock is not installed!" -i gtk-dialog-info
	fi
else
	"/usr/bin/canberra-gtk-play" --id="dialog-information" &
	notify-send "HostsBlock" "hostsblock is already enabled!" -i gtk-dialog-info
fi
}

restart_dnsmasq()
{
get_password
# command
sudo -Sp '' "/etc/init.d/dnsmasq" restart <<<"${sudo_password}"
# notify
"/usr/bin/canberra-gtk-play" --id="dialog-information" &
notify-send "HostsBlock" "dnsmasq service has been restarted" -i gtk-dialog-info
}

restart_indicator()
{
pkill -f "python /usr/share/indicator-hostsblock/indicator-hostsblock"
pkill -f "/bin/bash /usr/share/indicator-hostsblock/hostsblock-indicator auto_refresh"
pkill -f "inotifywait -qqre modify /usr/share/indicator-hostsblock/"
"/usr/share/indicator-hostsblock/indicator-hostsblock"
}

##############

if [ $# -eq 0 ]
then
	echo "You should specify a function as parameter; e.g. view_log_gui"
	exit 1
else
	for func do
		[ "$(type -t -- "$func")" = function ] && "$func"
	done
fi

exit 0
